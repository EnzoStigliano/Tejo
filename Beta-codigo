import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class HockeyJuego extends JPanel {
    private int jugador1X = 50, jugador1Y = 175; // Jugador 1 (WASD)
    private int jugador2X = 350, jugador2Y = 175; // Jugador 2 (Flechas)
    private int discoX = 200, discoY = 200;
    private int discoVelX = 3, discoVelY = 3; // Velocidades del disco
    private int golesJugador1 = 0, golesJugador2 = 0;

    private boolean[] teclasPresionadas = new boolean[256]; // Para controlar las teclas

    public HockeyJuego() {
        setFocusable(true);
        setBackground(Color.WHITE); // Fondo blanco
        setPreferredSize(new Dimension(600, 400)); // Cancha horizontal

        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                teclasPresionadas[e.getKeyCode()] = true;
            }

            public void keyReleased(KeyEvent e) {
                teclasPresionadas[e.getKeyCode()] = false;
            }
        });

        Timer timer = new Timer(20, this::actualizarJuego);
        timer.start();
    }

    private void actualizarJuego(ActionEvent e) {
        moverJugadores();
        moverDisco();
        repaint();
    }

    private void moverJugadores() {
        if (teclasPresionadas[KeyEvent.VK_W]) jugador1Y = Math.max(jugador1Y - 5, 30);
        if (teclasPresionadas[KeyEvent.VK_S]) jugador1Y = Math.min(jugador1Y + 5, getHeight() - 30);
        if (teclasPresionadas[KeyEvent.VK_A]) jugador1X = Math.max(jugador1X - 5, 0);
        if (teclasPresionadas[KeyEvent.VK_D]) jugador1X = Math.min(jugador1X + 5, getWidth() - 30);
        
        if (teclasPresionadas[KeyEvent.VK_UP]) jugador2Y = Math.max(jugador2Y - 5, 30);
        if (teclasPresionadas[KeyEvent.VK_DOWN]) jugador2Y = Math.min(jugador2Y + 5, getHeight() - 30);
        if (teclasPresionadas[KeyEvent.VK_LEFT]) jugador2X = Math.max(jugador2X - 5, 0);
        if (teclasPresionadas[KeyEvent.VK_RIGHT]) jugador2X = Math.min(jugador2X + 5, getWidth() - 30);
    }

    private void moverDisco() {
        discoX += discoVelX;
        discoY += discoVelY;

        // Rebote en los bordes
        if (discoY <= 30 || discoY >= getHeight() - 10) {
            discoVelY = -discoVelY; // Cambia la dirección vertical
        }

        if (discoX <= 0 || discoX >= getWidth() - 10) {
            discoVelX = -discoVelX; // Cambia la dirección horizontal
        }

        // Rebote en los jugadores
        if (colisionConJugador(jugador1X, jugador1Y) || colisionConJugador(jugador2X, jugador2Y)) {
            discoVelX = -discoVelX; // Cambia la dirección horizontal
        }

        verificarGol();
    }

    private boolean colisionConJugador(int jugadorX, int jugadorY) {
        int radioJugador = 15; // Radio del jugador
        Rectangle discoRect = new Rectangle(discoX, discoY, 10, 10); // Disco
        Circle jugadorCirculo = new Circle(jugadorX + radioJugador, jugadorY + radioJugador, radioJugador); // Jugador como círculo

        return jugadorCirculo.intersects(discoRect);
    }

    private void verificarGol() {
        // Verificar gol solo si el disco entra en el arco
        if (discoX <= 50 && discoY >= 150 && discoY <= 250) {
            // Solo contabiliza si el disco está completamente dentro del arco
            if (discoX <= 50 && discoX >= 0 && discoY >= 150 && discoY <= 250) {
                golesJugador2++;
                reiniciarDisco();
            }
        } else if (discoX >= getWidth() - 60 && discoY >= 150 && discoY <= 250) {
            // Solo contabiliza si el disco está completamente dentro del arco
            if (discoX >= getWidth() - 60 && discoX <= getWidth() && discoY >= 150 && discoY <= 250) {
                golesJugador1++;
                reiniciarDisco();
            }
        }
    }

    private void reiniciarDisco() {
        discoX = 300; // Reinicia el disco en el medio
        discoY = 200; // Reinicia el disco en el medio
        discoVelX = 3 * (Math.random() > 0.5 ? 1 : -1); // Reinicia la dirección horizontal
        discoVelY = 3 * (Math.random() > 0.5 ? 1 : -1); // Reinicia la dirección vertical
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Dibujar bordes de la cancha
        g.setColor(Color.BLACK);
        g.drawRect(5, 30, getWidth() - 10, getHeight() - 35); // Bordes

        // Dibujar arcos fijos
        g.setColor(Color.RED);
        g.fillArc(0, 150, 50, 100, 90, 180); // Arco jugador 1
        g.setColor(Color.BLUE);
        g.fillArc(getWidth() - 50, 150, 50, 100, -90, 180); // Arco jugador 2

        // Dibujar jugadores como círculos
        g.setColor(Color.RED);
        g.fillOval(jugador1X, jugador1Y, 30, 30); // Jugador 1
        g.setColor(Color.BLUE);
        g.fillOval(jugador2X, jugador2Y, 30, 30); // Jugador 2
        
        // Dibujar disco
        g.setColor(Color.BLACK);
        g.fillOval(discoX, discoY, 10, 10); // Disco
        
        // Dibujar goles como contador de estadio
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.BOLD, 30));
        g.drawString(String.valueOf(golesJugador1), 250, 30);
        g.drawString(String.valueOf(golesJugador2), 350, 30);
        g.drawString("Goles", 290, 70);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Hockey de Mesa");
        HockeyJuego juego = new HockeyJuego();
        frame.add(juego);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    // Clase auxiliar para representar un círculo
    static class Circle {
        int centerX, centerY, radius;

        Circle(int centerX, int centerY, int radius) {
            this.centerX = centerX;
            this.centerY = centerY;
            this.radius = radius;
        }

        boolean intersects(Rectangle rect) {
            // Verifica si el círculo intersecta con el rectángulo
            int nearestX = Math.max(rect.x, Math.min(centerX, rect.x + rect.width));
            int nearestY = Math.max(rect.y, Math.min(centerY, rect.y + rect.height));
            int deltaX = centerX - nearestX;
            int deltaY = centerY - nearestY;
            return (deltaX * deltaX + deltaY * deltaY) < (radius * radius);
        }
    }
}
